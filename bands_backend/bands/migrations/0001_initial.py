# Generated by Django 5.1 on 2024-08-31 21:02

import bands.models_extensions
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', bands.models_extensions.PositiveAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('spotify_url', models.CharField(max_length=2000)),
                ('image_url', models.CharField(max_length=2000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'artist',
            },
        ),
        migrations.CreateModel(
            name='Metric',
            fields=[
                ('id', bands.models_extensions.PositiveAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('type', bands.models_extensions.PositiveTinyIntegerField(choices=[(0, 'flag'), (1, 'value')])),
                ('deleted_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'metric',
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', bands.models_extensions.PositiveAutoField(primary_key=True, serialize=False)),
                ('value', bands.models_extensions.PositiveTinyIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('artist_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bands.artist')),
                ('metric_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bands.metric')),
            ],
            options={
                'db_table': 'score',
                'constraints': [models.UniqueConstraint(models.F('artist_id'), models.F('metric_id'), name='artist_id_metric_id_unique')],
            },
        ),
    ]
